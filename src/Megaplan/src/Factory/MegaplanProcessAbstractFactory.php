<?php


namespace rollun\api\megaplan\Factory;


use Interop\Container\ContainerInterface;
use rollun\api\megaplan\Callback\Interrupter\MegaplanProcess;
use rollun\callback\Callback\CallbackException;
use rollun\callback\Callback\SerializedCallback;
use rollun\callback\ConfigProvider;

class MegaplanProcessAbstractFactory extends \rollun\callback\Callback\Interrupter\Factory\ProcessAbstractFactory
{
    const DEFAULT_CLASS = MegaplanProcess::class;

    public function canCreate(ContainerInterface $container, $requestedName)
    {
        return parent::canCreate($container, $requestedName); // TODO: Change the autogenerated stub
    }

    public function __invoke(ContainerInterface $container, $requestedName, array $options = null)
    {
        $factoryConfig = $options ?? $container->get('config')[static::KEY][$requestedName];


        $class = $factoryConfig[static::KEY_CLASS];
        $callback = $factoryConfig[static::KEY_CALLBACK_SERVICE];

        if (is_string($callback)) {
            if (!$container->has($callback)) {
                throw new CallbackException("Service with name '$callback' - not found.");
            }
            $callback = $container->get($callback);
        }

        $maxExecuteTime = $factoryConfig[self::KEY_MAX_EXECUTE_TIME] ?? null;
        $pidKiller = null;

        if ($maxExecuteTime && $container->has(ConfigProvider::PID_KILLER_SERVICE)) {
            $pidKiller = $container->get(ConfigProvider::PID_KILLER_SERVICE);
        } else {
            $maxExecuteTime = null;
        }

        $defaultClass = parent::DEFAULT_CLASS;
        $instance = new $defaultClass(new SerializedCallback($callback), $pidKiller, $maxExecuteTime);

        return new $class($instance);
    }
}